TASK 1 : 

#include <iostream>
#include <string>
using namespace std;
class Shape
{
private:
    string shapeType;
    double param1;
    double param2;

public:
    Shape(string type, double p1, double p2) : shapeType(type), param1(p1), param2(p2) {}
    void area()
    {
        if (shapeType == "Triangle")
        {
            double area = 0.5 * param1 * param2;
            cout << "Area: " << area << endl;
        }
        else if (shapeType == "Rectangle" || shapeType == "Square")
        {
            double area = param1 * param2;
            cout << "Area: " << area << endl;
        }
        else if (shapeType == "Rhombus")
        {
            double area = 0.5 * param1 * param2;
            cout << "Area: " << area << endl;
        }
        else
        {
            cout << "Area: Shape unknown" << endl;
        }
    }
};
int main()
{
    Shape triangle("Triangle", 10, 25);
    triangle.area();
    cout << "==========================" << endl;
    Shape square("Square", 10, 10);
    square.area();
    cout << "==========================" << endl;
    Shape rhombus("Rhombus", 18, 25);
    rhombus.area();
    cout << "==========================" << endl;
    Shape rectangle("Rectangle", 15, 30);
    rectangle.area();
    cout << "==========================" << endl;
    Shape trapezium("Trapezium", 15, 30);
    trapezium.area();
    return 0;
}

TASK 2 :

#include <iostream>
#include <string>
#include <iomanip>
using namespace std;
class Calculator
{
private:
    string lastOperation;

public:
    Calculator()
    {
        cout << "Calculator is ready!" << endl;
    }
    int calculate(int a, int b, char op)
    {
        int result;
        switch (op)
        {
        case '+':
            result = a + b;
            break;
        case '-':
            result = a - b;
            break;
        case '*':
            result = a * b;
            break;
        case '/':
            result = static_cast<double>(a) / b;
            break;
        default:
            cout << "Invalid operation!" << endl;
            result = 0;
            break;
        }
        lastOperation = std::to_string(a) + " " + std::string(1, op) + " " + std::to_string(b) + " = " +
                        std::to_string(result);
        return result;
    }
    void showCalculation()
    {
        cout << lastOperation << endl;
    }
};
int main()
{
    Calculator c1;
    cout << "==================" << endl;
    int val = c1.calculate(10, 20, '+');
    cout << "Returned value: " << val << endl;
    c1.showCalculation();
    cout << "==================" << endl;
    val = c1.calculate(val, 10, '-');
    cout << "Returned value: " << val << endl;
    c1.showCalculation();
    cout << "==================" << endl;
    val = c1.calculate(val, 5, '*');
    cout << "Returned value: " << val << endl;
    c1.showCalculation();
    cout << "==================" << endl;
    val = c1.calculate(val, 16, '/');
    cout << "Returned value: " << fixed << setprecision(2) << val << endl;
    c1.showCalculation();
    return 0;
}
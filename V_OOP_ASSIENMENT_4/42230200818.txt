

<--------------------------------------------------------------------Task 1--------------------------------------------------------->
class Marks
{
private:
    int mark;

public:
    Marks(int m)
    {
        mark = m;
    }
    int getMark()
    {
        return mark;
    }
    Marks operator+(Marks &other)
    {
        int total = this->mark + other.mark;
        return Marks(total);
    }
};



<--------------------------------------------------------------------Task 2--------------------------------------------------------->

class Circle
{
private:
    double radius;

public:
    Circle(double r)
    {
        radius = r;
    }

    double getRadius() { return radius; }

    void setRadius(double radius)
    {
        if (radius > 0)
        {
            this->radius = radius;
        }
        else
        {
            cerr << "Error: Radius cannot be negative." << endl;
        }
    }

    double getArea()
    {
        return M_PI * pow(radius, 2);
    }

    Circle operator+(Circle &other)
    {
        double newRadius = radius+other.radius;
        return Circle(newRadius);
    }
};


<--------------------------------------------------------------------Task 3--------------------------------------------------------->

class Color
{
private:
    string color;

public:
    Color(string color1, string color2)
    {
        if (color1 == "Invalid")
        {
            color = color2;
        }
        else
        {
            if (color1 == "red" && color2 == "yellow")
            {
                color = "Orange";
            }
            else if (color1 == "red" && color2 == "blue")
            {
                color = "Violet";
            }
            else if (color1 == "yellow" && color2 == "blue")
            {
                color = "Green";
            }
            else if (color1 == "blue" && color2 == "yellow")
            {
                color = "Green";
            }
            else if (color1 == "yellow" && color2 == "red")
            {
                color = "Orange";
            }
            else if (color1 == "blue" && color2 == "red")
            {
                color = "Violet";
            }
            else
            {
                color = "Invalid";
            }
        }
    }

    string getColor() { return color; }

    Color operator+(Color &other)
    {
        return Color(color, other.color);
    }
};

Color readColor()
{
    string input;
    cin >> input;
    return Color("Invalid", input);
}



<--------------------------------------------------------------------Task 4--------------------------------------------------------->

class Triangle
{
private:
    int base;
    int height;

public:
    Triangle(int base, int height) : base(base), height(height) {}
    int getBase() { return base; }
    int getHeight() { return height; }

    double calcArea() { return 0.5 * base * height; }

    Triangle operator-(Triangle &other)
    {
        int newBase = max(base - other.base, 0);
        int newHeight = max(height - other.height, 0);
        return Triangle(newBase, newHeight);
    }
};

<--------------------------------------------------------------------Task 5--------------------------------------------------------->
class Coordinates
{
private:
    int x;
    int y;

public:
    Coordinates(int x, int y)
    {
        this->x = x;
        this->y = y;
    }
    int getX() { return x; }
    int getY() { return y; }

    Coordinates operator-(Coordinates &other)
    {
        return Coordinates(x - other.x, y - other.y);
    }

    Coordinates operator*(Coordinates &other)
    {
        return Coordinates(x * other.x, y * other.y);
    }

    bool operator==(Coordinates &other)
    {
        return x == other.x && y == other.y;
    }

    string checkEqual(Coordinates &other)
    {
        if (*this == other)
        {
            return "The calculated coordinates are the same.";
        }
        else
        {
            return "The calculated coordinates are NOT the same.";
        }
    }
};
